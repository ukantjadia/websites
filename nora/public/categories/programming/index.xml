<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on Ukant Jadia</title>
    <link>https://ukantjadia.me/categories/programming/</link>
    <description>Recent content in Programming on Ukant Jadia</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 12 Jul 2019 10:00:00 -0700</lastBuildDate><atom:link href="https://ukantjadia.me/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>What Is Rust&#39;s unsafe?</title>
      <link>https://ukantjadia.me/post/what-is-rusts-unsafe/</link>
      <pubDate>Fri, 12 Jul 2019 10:00:00 -0700</pubDate>
      
      <guid>https://ukantjadia.me/post/what-is-rusts-unsafe/</guid>
      <description>I&amp;rsquo;ve seen a lot of misconceptions around what the unsafe keyword means for the utility and validity of Rust and its marketing as a &amp;ldquo;safe systems language&amp;rdquo;. The truth is a lot more complicated than a single pithy tweet can possibly sum up, unfortunately; here it is as I see it.
Basically, the unsafe keyword does not turn off the advanced type system that keeps Rust code honest. It only allows a few select &amp;ldquo;superpowers&amp;rdquo;, like dereferencing raw pointers.</description>
    </item>
    
  </channel>
</rss>
